// Q3.Implement Heapsort algorithm using Minheap.
// This must include building the heap as well as using it to sort an input array.
// The heapsort need not be done in-place.

#include <bits/stdc++.h>
using namespace std;

// function to heapify the given array with i as the index number
void heapify(int arr[], int n, int i)
{

	// Initialize smallestt as root
	int smallest = i;

	int l = 2 * i + 1;

	int r = 2 * i + 2;

	if (l < n && arr[l] < arr[smallest])
		smallest = l;

	if (r < n && arr[r] < arr[smallest])
		smallest = r;

	// If largest is not root
	if (smallest != i) {
		swap(arr[i], arr[smallest]);

		// Recursively heapify the affected sub-tree
		heapify(arr, n, smallest);
	}
}

// use heapsort to sort the given array
void heapSort(int arr[], int n)
{

	// Build heap (rearrange array)
	// i= n / 2 - 1 since it's the last non-leaf node in the given array so we can only heapify upto that point
	for (int i = n / 2 - 1; i >= 0; i--)
		heapify(arr, n, i);

	// One by one extract an element
	// from heap
	for (int i = n - 1; i > 0; i--) {

		// Move current root to end
		swap(arr[0], arr[i]);

		// call min heapify on the reduced heap
		heapify(arr, i, 0);
	}
}

void printArray(int arr[], int n)
{
	for (int i = n-1; i >= 0; i--)
		cout << arr[i] << " ";
	cout << "\n";
}

int main()
{
	int arr[] = { 13, 54, 67, 89, 69, 5};
	int n = sizeof(arr) / sizeof(arr[0]);

	// Function call
	heapSort(arr, n);

	cout << "The sorted array is: ";
	printArray(arr, n);
}
/*
The sorted array is: 5 13 54 67 69 89 
*/
